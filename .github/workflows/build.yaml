name: Build & Push Docker Image

on:
  push:

jobs:
  build:
    name: Docker build & push image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set env
        run: echo "REPOSITORY_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set tag to build
        run: |
          tag=$(echo ${{github.ref}} | sed -e 's/refs\/heads\///')
          if [[ ${{github.ref}} == 'refs/tags/'* ]]; then
              tag=$(echo ${{github.ref}} | sed -e 's/refs\/tags\///')
          elif [[ ${{github.ref}} == 'refs/heads/main' ]]; then
              tag=latest
          fi
          echo "TAG=$tag" >> $GITHUB_ENV
      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64, linux/arm64
          target: prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.REPOSITORY_NAME}}:${{env.TAG}}
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker run -it --rm \
              --name cs-cosmetics \
              -p 8020:80 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e APP_SECRET=${{ secrets.APP_SECRET }} -d 
              mkldevops/cs-cosmetics
           
            # create database
            docker exec -ti cs-cosmetics symfony console d:d:c --if-not-exists
            
            # run migrations
            docker exec -ti cs-cosmetics symfony console d:m:m -n
            
            # list running containers
            docker ps
